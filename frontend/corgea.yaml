# This is the corgea YAML file used for defining and managing security policies within applications.
# For more information, visit: https://docs.corgea.app/policies
version: 1  # Specifies the version of the corgea YAML standard being used. Update only if the standard changes.
policies:
  - type: "scan"
    description: >
      This frontend is part of a deliberately vulnerable application designed for testing and educational purposes.
      It should focus on identifying and addressing vulnerabilities specific to client-side code, such as Cross-Site Scripting (XSS),
      improper handling of user inputs, and insecure storage practices. Implement robust input validation and output encoding to prevent
      XSS attacks. Regularly scan for vulnerabilities in third-party libraries and update them to mitigate risks. Ensure that sensitive
      data is not exposed through the Document Object Model (DOM) or browser storage mechanisms like localStorage or sessionStorage.
      Implement a strict Content Security Policy (CSP) to add an extra layer of protection against client-side attacks. Use automated
      tools to scan for common vulnerabilities and conduct manual code reviews to identify subtle security issues. Pay attention to
      potential security misconfigurations and ensure that security headers are properly set. Regularly conduct penetration testing
      to uncover hidden vulnerabilities and improve the overall security posture of the frontend.
  - type: "false_positive"
    description: >
      This section outlines scenarios where security alerts in the frontend may be considered false positives
      due to specific user interactions or design choices. For example, certain UI components might use inline
      scripts or styles for dynamic content updates, which could be misinterpreted as Cross-Site Scripting (XSS)
      attempts. Additionally, single-page applications often make frequent API calls that could trigger alerts
      for unusual network activity. Understanding these frontend-specific nuances is crucial for distinguishing
      between genuine threats and benign activities that align with our user experience and design requirements.
    cwes:
      - "CWE-79"  # CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
      - "CWE-116" # CWE-116: Improper Encoding or Escaping of Output
      - "CWE-209" # CWE-209: Information Exposure Through an Error Message
