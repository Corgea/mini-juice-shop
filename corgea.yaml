# This is the corgea YAML file used for defining and managing security policies within applications.
# For more information, visit: https://docs.corgea.app/policies
version: 1  # Specifies the version of the corgea YAML standard being used. Update only if the standard changes.
policies:
  - type: "scan"
    path: 'backend'
    description: >
      This section ensures that all directories and files are thoroughly scanned to detect any security vulnerabilities in the backend code.
      It is essential to identify and address potential issues such as SQL injection, exposure of sensitive data, and unauthorized access.
      Comprehensive scanning helps maintain the security and integrity of the application.
  - type: "scan"
    path: 'frontend'
    description: >
      This section ensures that all directories and files are thoroughly scanned to detect any security vulnerabilities in the backend code.
      It is essential to identify and address potential issues such as SQL injection, exposure of sensitive data, and unauthorized access.
      Comprehensive scanning helps maintain the security and integrity of the application.
  - type: "fix"
    path: 'backend'
    description: >
      Secure backend systems by encrypting data both at rest and in transit. Ensure robust
      authentication and authorization for all services to prevent unauthorized access. Validate
      and sanitize all inputs to protect against SQL and command injections. Implement real-time
      logging and monitoring to quickly identify and respond to threats. Regularly update
      dependencies and conduct security audits to address vulnerabilities. Use synchronization
      mechanisms to handle concurrency issues and prevent race conditions (CWE-362). Mitigate XSS
      risks by encoding outputs and validating inputs (CWE-79).
    cwes:
      - "CWE-22"  # CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
      - "CWE-89"  # CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
      - "CWE-200" # CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
      - "CWE-284" # CWE-284: Improper Access Control
      - "CWE-311" # CWE-311: Missing Encryption of Sensitive Data
      - "CWE-502" # CWE-502: Deserialization of Untrusted Data
      - "CWE-611" # CWE-611: Improper Restriction of XML External Entity Reference
      - "CWE-362"
      - "CWE-79"
  - type: "false_positive"
    path: 'backend'
    description: >
      This section outlines scenarios where security alerts in the backend may be considered false positives
      due to specific business logic or domain knowledge. For example, backend batch processing jobs might
      generate high volumes of database queries or file operations that could be misinterpreted as suspicious
      activity. Additionally, backend services that handle dynamic content generation might trigger alerts for
      potential injection attacks, which are expected and should not be flagged as security incidents. In the
      case of CWE-79, certain backend systems might generate dynamic HTML content for internal use, which could
      be flagged as Cross-Site Scripting (XSS) attempts, but are actually safe due to controlled environments.
      For CWE-362, some backend processes might involve concurrent operations that are designed to handle race
      conditions safely, yet automated tools might still flag them as potential issues. Understanding these
      backend-specific nuances is crucial for distinguishing between genuine threats and benign activities
      that align with our operational requirements.
    cwes:
      - "CWE-20"  # CWE-20: Improper Input Validation
      - "CWE-78"  # CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
      - "CWE-209" # CWE-209: Information Exposure Through an Error Message
      - "CWE-362"
      - "CWE-79"
  - type: "false_positive"
    path: "frontend"
    description: >
      This section outlines scenarios where security alerts in the frontend may be considered false positives
      due to specific user interactions or design choices. For example, certain UI components might use inline
      scripts or styles for dynamic content updates, which could be misinterpreted as Cross-Site Scripting (XSS)
      attempts. Additionally, single-page applications often make frequent API calls that could trigger alerts
      for unusual network activity. Understanding these frontend-specific nuances is crucial for distinguishing
      between genuine threats and benign activities that align with our user experience and design requirements.
    cwes:
      - "CWE-79"  # CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
      - "CWE-116" # CWE-116: Improper Encoding or Escaping of Output
      - "CWE-209" # CWE-209: Information Exposure Through an Error Message