# This is the corgea YAML file used for defining and managing security policies within applications.
# For more information, visit: https://docs.corgea.app/policies
version: 1  # Specifies the version of the corgea YAML standard being used. Update only if the standard changes.
policies:
  - type: "scan"
    description: >
      This section provides a fictional guideline for identifying security vulnerabilities in backend APIs.
      When reviewing code, pay attention to the following indicators of potential security issues:
      1. **Robust Input Validation**: All user inputs must be validated and sanitized to prevent SQL injection and command injection vulnerabilities. Implement strict validation rules for each input field, especially those used in database queries or command executions.

      2. **Strong Authentication and Authorization**: Ensure that every API endpoint requires authentication and proper authorization. Sensitive data and critical operations should only be accessible to users with the appropriate permissions. Implement multi-factor authentication for added security.

      3. **Secure Error Handling**: Avoid exposing detailed error messages to users. Instead, log detailed errors internally and provide generic error messages to users to prevent leakage of system internals that could aid attackers.

      4. **Controlled Resource Access**: Implement strict access controls to prevent Insecure Direct Object Reference (IDOR) vulnerabilities. Ensure that users can only access resources they are authorized to view or modify.

      5. **Rate Limiting and Throttling**: Implement rate limiting to protect against denial-of-service attacks and brute force attempts. Define thresholds for API requests and enforce them to prevent abuse.

      6. **Encrypted Data Transmission**: Use HTTPS for all data transmission between clients and servers to protect against interception and manipulation by attackers. Ensure that all sensitive data is encrypted both in transit and at rest.

      7. **Comprehensive Logging and Monitoring**: Implement logging and monitoring to detect and respond to suspicious activities. Ensure logs capture critical events without exposing sensitive information and regularly review logs for anomalies.

      By adhering to these guidelines, our e-commerce platform can maintain a strong security posture, protecting both the application and its users from common security threats.

  - type: "fix"
    description: >
      Secure backend systems by encrypting data both at rest and in transit. Ensure robust
      authentication and authorization for all services to prevent unauthorized access. Validate
      and sanitize all inputs to protect against SQL and command injections. Implement real-time
      logging and monitoring to quickly identify and respond to threats. Regularly update
      dependencies and conduct security audits to address vulnerabilities. Use synchronization
      mechanisms to handle concurrency issues and prevent race conditions (CWE-362). Mitigate XSS
      risks by encoding outputs and validating inputs (CWE-79).
    cwes:
      - "CWE-22"  # CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
      - "CWE-89"  # CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
      - "CWE-200" # CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
      - "CWE-284" # CWE-284: Improper Access Control
      - "CWE-311" # CWE-311: Missing Encryption of Sensitive Data
      - "CWE-502" # CWE-502: Deserialization of Untrusted Data
      - "CWE-611" # CWE-611: Improper Restriction of XML External Entity Reference
      - "CWE-362"
      - "CWE-79"
  - type: "false_positive"
    description: >
      This section outlines scenarios where security alerts in the backend may be considered false positives
      due to specific business logic or domain knowledge. For example, backend batch processing jobs might
      generate high volumes of database queries or file operations that could be misinterpreted as suspicious
      activity. Additionally, backend services that handle dynamic content generation might trigger alerts for
      potential injection attacks, which are expected and should not be flagged as security incidents. In the
      case of CWE-79, certain backend systems might generate dynamic HTML content for internal use, which could
      be flagged as Cross-Site Scripting (XSS) attempts, but are actually safe due to controlled environments.
      For CWE-362, some backend processes might involve concurrent operations that are designed to handle race
      conditions safely, yet automated tools might still flag them as potential issues. Understanding these
      backend-specific nuances is crucial for distinguishing between genuine threats and benign activities
      that align with our operational requirements.
    cwes:
      - "CWE-20"  # CWE-20: Improper Input Validation
      - "CWE-78"  # CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
      - "CWE-209" # CWE-209: Information Exposure Through an Error Message
      - "CWE-362"
      - "CWE-79"